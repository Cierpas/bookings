{{define "base"}}
<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>My nice page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
</head>

<body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                            Rooms
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/kings-room">King's room</a></li>
                            <li><a class="dropdown-item" href="/small-storage">Small storage</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    {{block "content" .}}

    {{end}}

    <div class="row my-footer">
        <div class="col">Left</div>
        <div class="col">Middle</div>
        <div class="col">Right</div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    {{block "js" .}}

    {{end}}

    <script>
        const attention = Propmt();

        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
        })();

        document.getElementById("colorButton").addEventListener("click", () => {
            // notifyModal("title", "<em>Hello, world!</em>", "success", "My Text for the button");
            const html = `
            <form id="check-availability-form" action="" method="post" novalidate class="needs-validation">
                <div class="row gx-3">
                    <div class="col">
                        <div class="row" id="reservation-dates-modal">
                            <div class="col">
                                <input type="text" name="start" id="start" class="form-control mb-3" disabled required placeholder="Arrival">
                            </div>
                            <div class="col">
                                <input type="text" name="end" id="end" class="form-control" disabled required placeholder="Departure">
                            </div>
                        </div>
                    </div>
                </div>
            </form>
            `

            attention.custom({ msg: html, title: "Choose your dates" });
        });

        const elem = document.getElementById("reservation-dates");
        const rangepicker = new DateRangePicker(elem, {
            buttonClass: "btn",
            format: "dd-mm-yyyy",
        });

        function notify(msg, msgType) {
            notie.alert({
                type: msgType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
                text: msg,
            })
        };

        function notifyModal(title, html, icon, confirmButtonText) {
            Swal.fire({
                title: title,
                html: html,
                icon: icon,
                confirmButtonText: confirmButtonText
            })
        }

        function Propmt() {
            const toast = (c) => {
                const {
                    msg = "",
                    icon = "success",
                    positon = "top-end",
                } = c;

                const Toast = Swal.mixin({
                    toast: true,
                    showConfirmButton: false,
                    timer: 1500,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.onmouseenter = Swal.stopTimer;
                        toast.onmouseleave = Swal.resumeTimer;
                    },
                });

                Toast.fire({
                    title: msg,
                    positon: positon,
                    icon: icon
                });
            };

            const message = (c) => {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                    icon = "",
                } = c;

                Swal.fire({
                    icon: icon,
                    title: title,
                    text: msg,
                    footer: footer
                });
            };

            const success = (c) => {
                message({
                    msg: c["msg"],
                    title: c["title"],
                    footer: c["footer"],
                    icon: "success"
                })
            };

            const error = (c) => {
                message({
                    msg: c["msg"],
                    title: c["title"],
                    footer: c["footer"],
                    icon: "error"
                })
            };

            async function custom(c) {
                const {
                    msg = "",
                    title = ""
                } = c;

                const { value: formValues } = await Swal.fire({
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    willOpen: () => {

                        const elem = document.getElementById("reservation-dates-modal");
                        const rp = new DateRangePicker(elem, {
                            format: "dd-mm-yyyy",
                            showOnFocus: true,
                        });
                    },
                    didOpen: () => {
                        const container = document.getElementById("swal2-html-container");
                        container.style.overflow = "unset";
                        container.style.zIndex = "2";
                        document.getElementById("start").removeAttribute("disabled");
                        document.getElementById("end").removeAttribute("disabled");
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById("start").value,
                            document.getElementById("end").value
                        ]
                    }
                });

                if (formValues) {
                    Swal.fire(JSON.stringify(formValues))
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom
            }
        }

    </script>
</body>

</html>
{{end}}